#include<stdio.h>
#include<stdlib.h>

  typedef struct node{
    int data;
    struct node *next;
  }NODE;
  
  NODE *front = NULL, *rear = NULL;
  
      void Enqueue(int element){
       NODE *newnode;
       newnode=(NODE*)malloc(sizeof(NODE));
       newnode->data=element;
         if(rear==NULL){
             front = rear = newnode;
             rear->next = NULL;
         }else{
          rear->next=newnode;
          rear= newnode;      
         }return;
     }
     
     
     void Dequeue(){
       NODE *temp = front;
       if(front==NULL){
        printf("QUEUE IS EMPTY");
       }else{
          printf("deleted data is %d",temp->data);
          front = front->next;
          free(temp);
          if(front==NULL){
                  rear = NULL;
          }
       }printf("\n");   
       return;
    }  
    
    
    void display(){
      if(front==NULL){
        printf("QUEUE IS EMPTY");
       }else{
         NODE *temp=front;
           while(temp!=NULL){
              printf("%d\t",temp->data);
              temp=temp->next;
           }
      }printf("\n");
      return;
    }
    
    
    void peek(){
       if(front==NULL){
        printf("-1\n");
       }else{
          printf("%d\n",front->data);      
       }return;   
    }
    
    void main(){
    int element,op;
    while(1){
     printf("Enter 1.Enqueue\n2.Dequeue\n3.display\n4.peek\n5.exit\n");
     scanf("%d",&op);
      switch(op){
       case 1 : printf("enter the element to add\t");
                scanf("%d",&element);
                Enqueue(element);
                break;
       case 2 : Dequeue();
                break;
       case 3 : display();
                break;                   
      case 4 :  peek();
                break;
      case 5 :  exit(0);
      default : printf("entered an invalid expression\n");
      
      }
    }
  }
